/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: common.proto */

#ifndef PROTOBUF_C_common_2eproto__INCLUDED
#define PROTOBUF_C_common_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1005000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif


typedef struct Rpc__Request Rpc__Request;
typedef struct Rpc__Response Rpc__Response;


/* --- enums --- */


/* --- messages --- */

struct  Rpc__Request
{
  ProtobufCMessage base;
  int32_t number;
};
#define RPC__REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__request__descriptor) \
, 0 }


struct  Rpc__Response
{
  ProtobufCMessage base;
  int32_t result;
};
#define RPC__RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&rpc__response__descriptor) \
, 0 }


/* Rpc__Request methods */
void   rpc__request__init
                     (Rpc__Request         *message);
size_t rpc__request__get_packed_size
                     (const Rpc__Request   *message);
size_t rpc__request__pack
                     (const Rpc__Request   *message,
                      uint8_t             *out);
size_t rpc__request__pack_to_buffer
                     (const Rpc__Request   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Request *
       rpc__request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__request__free_unpacked
                     (Rpc__Request *message,
                      ProtobufCAllocator *allocator);
/* Rpc__Response methods */
void   rpc__response__init
                     (Rpc__Response         *message);
size_t rpc__response__get_packed_size
                     (const Rpc__Response   *message);
size_t rpc__response__pack
                     (const Rpc__Response   *message,
                      uint8_t             *out);
size_t rpc__response__pack_to_buffer
                     (const Rpc__Response   *message,
                      ProtobufCBuffer     *buffer);
Rpc__Response *
       rpc__response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   rpc__response__free_unpacked
                     (Rpc__Response *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Rpc__Request_Closure)
                 (const Rpc__Request *message,
                  void *closure_data);
typedef void (*Rpc__Response_Closure)
                 (const Rpc__Response *message,
                  void *closure_data);

/* --- services --- */

typedef struct Rpc__Multiplication_Service Rpc__Multiplication_Service;
struct Rpc__Multiplication_Service
{
  ProtobufCService base;
  void (*multiply)(Rpc__Multiplication_Service *service,
                   const Rpc__Request *input,
                   Rpc__Response_Closure closure,
                   void *closure_data);
};
typedef void (*Rpc__Multiplication_ServiceDestroy)(Rpc__Multiplication_Service *);
void rpc__multiplication__init (Rpc__Multiplication_Service *service,
                                Rpc__Multiplication_ServiceDestroy destroy);
#define RPC__MULTIPLICATION__BASE_INIT \
    { &rpc__multiplication__descriptor, protobuf_c_service_invoke_internal, NULL }
#define RPC__MULTIPLICATION__INIT(function_prefix__) \
    { RPC__MULTIPLICATION__BASE_INIT,\
      function_prefix__ ## multiply  }
void rpc__multiplication__multiply(ProtobufCService *service,
                                   const Rpc__Request *input,
                                   Rpc__Response_Closure closure,
                                   void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor rpc__request__descriptor;
extern const ProtobufCMessageDescriptor rpc__response__descriptor;
extern const ProtobufCServiceDescriptor rpc__multiplication__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_common_2eproto__INCLUDED */
