syntax = "proto3";

/*

typedef enum __attribute__((packed)) {
    INT_32,
    DOUBLE,
    STRING,
    BOOL,
    FILE_INFO
} ValueType;

typedef struct __attribute__((packed)) {
    ValueType type;
    union __attribute__((packed)) {
        int32_t int_value;
        double double_value;
        String string_value;
        bool bool_value;
        FileInfo file_info_value;
    };
} NodeValue;

 */

package Rpc;

message FileInfo {
  string name = 1;
  string owner = 2;
  uint64 access_time = 3;
  string mime_type = 4;
}

message NodeId {
  uint32 page_id = 1;
  uint32 item_id = 2;
}

message NodeValue {
  enum Type {
    INT_32 = 0;
    DOUBLE = 1;
    STRING = 2;
    BOOL = 3;
    FILE_INFO = 4;
  }

  Type type = 1;
  oneof value {
    int32 int_value = 2;
    double double_value = 3;
    string string_value = 4;
    bool bool_value = 5;
    FileInfo file_info_value = 6;
  }
}

// Файл будет всегда фильтроваться по имени.
message Filter {
  enum Type {
    GREATER = 0;
    LESS = 1;
    EQUAL = 2;
    NOT_EQUAL = 3;
  }
  Type type = 1;
  oneof argument {
    int32 int_argument = 2;
    double double_argument = 3;
    string string_argument = 4;
    bool bool_argument = 5;
  }
}

message FilterChain {
  repeated Filter filters = 1;
}

message Node {
  NodeId id = 1;
  NodeId parent_id = 2;
  NodeValue value = 3;
}

message CreateNodeRequest {
  NodeValue value = 1;
  NodeId parent_id = 2;
}

message UpdateNodeRequest {
  NodeId id = 1;
  NodeId parent_id = 2;
  NodeValue value = 3;
}

message DeleteNodeRequest {
  NodeId id = 1;
}

message DeletedNodes {
  int32 count = 1;
}

service Database {
  rpc CreateNode(CreateNodeRequest) returns (Node);
  rpc UpdateNode(UpdateNodeRequest) returns (Node);
  rpc DeleteNode(DeleteNodeRequest) returns (Node);
  rpc GetNode(NodeId) returns (Node);
  rpc GetNodeByFilter(FilterChain) returns (Node);
  rpc DeleteNodesByFilter(FilterChain) returns (DeletedNodes);
}